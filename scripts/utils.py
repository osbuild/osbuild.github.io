
import re
import os

PRE_TITLE_TEMPLATE = """---
custom_edit_url: {custom_edit_url}
---
"""

POST_TITLE_TEMPLATE = """
<!--
[//]: # ( DO NOT MODIFY THIS FILE! )
[//]: # ( This content is generated by `scripts/pull_readmes.py` )
[//]: # ( Rather change the source of this: {upstream_reference} )
-->
"""

RELATIVE_LINK_PATTERN = r'\[(.*?)\]\((.*?)\)'


def resolve_dirs(baseurl, link):
    """
    Resolve relative or absolute links.
    """
    baseurl = baseurl.replace("/main/", "/tree/main/")

    if link.startswith("./"):
        link = link[2:]
    elif link.startswith("../"):
        link = link[3:]
        baseurl = "/".join(baseurl.split("/")[0:-1])
    elif link.startswith("/"):
        # Links starting with "/" are relative to the repository root
        link = link[1:]

        # For .md files, convert to relative path
        if link.endswith('.md'):
            # Extract the file path from baseurl
            match = re.search(r'.*/tree/main/(.+)', baseurl)
            if match:
                current_file_path = match.group(1)
                current_dir = os.path.dirname(current_file_path)
                relative_path = os.path.relpath(link, current_dir)
                return relative_path

        # For non-.md files, convert to absolute URL
        return re.sub(r'/tree/main/.*$', f'/tree/main/{link}', baseurl)

    if link.startswith("#"):
        # Don't modify anchors
        return link

    baseurl = re.sub(r'/[^/]+$', '', baseurl) + "/"
    absolute_link = f'{baseurl}{link}'
    return absolute_link

def replace_relative_links(match, baseurl):
    """
    Replace relative links in Markdown content with absolute links.
    """
    link_text = match.group(1)
    relative_link = match.group(2)

    if relative_link.endswith('.md') or relative_link.startswith('http'):
        return match.group(0)

    absolute_link = resolve_dirs(baseurl, relative_link)
    
    return f'[{link_text}]({absolute_link})'


def parse_markdown_and_replace_links(file_path, baseurl, relative_link_replacement):
    """
    Parse a Markdown file and replace relative links with absolute links.
    """
    with open(file_path, 'r', encoding='utf-8') as file:
        markdown_content = file.read()

    if relative_link_replacement:
        parsed_content = re.sub(RELATIVE_LINK_PATTERN,
                                lambda match: replace_relative_links(match, baseurl),
                                markdown_content, flags=re.DOTALL)
    else:
        parsed_content = markdown_content

    # Drop angel brackets around hyperlinks/email links because DocuSaurus doesn't like them
    angel_bracket_pattern = r'<(http.+?|.+@.+)>'
    parsed_content = re.sub(angel_bracket_pattern,
                            lambda match: match.group(1),
                            parsed_content)

    return parsed_content


def patch_md(targetpath, originating_url, relative_link_replacement=True):
    """ patch_md
    Patches the following:
        * add header to setup correct "custom_edit_url"
        * adapt links so "repo-local" links still work from osbuild.org
          (if relative_link_replacement is True)
        * add warning template to the file that it is autogenerated
    """
    upstream_reference = originating_url.replace("/main/","/blob/main/")
    parsed_md = parse_markdown_and_replace_links(targetpath, originating_url, relative_link_replacement)

    with open(targetpath, 'w', encoding='utf-8') as output_file:
        output_file.write(PRE_TITLE_TEMPLATE.format(custom_edit_url=upstream_reference))
        template_inserted = False
                    # we need to insert the warning-template _after_ the first heading to have the title correct
        for parsed_line in parsed_md.split("\n"):
            output_file.write(parsed_line + "\n")
            if not template_inserted and parsed_line.startswith("# "):
                output_file.write(POST_TITLE_TEMPLATE.format(upstream_reference=upstream_reference))
                template_inserted = True
