"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[826],{9729:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"developer-guide/projects/cockpit-composer/index","title":"index","description":"[!WARNING]","source":"@site/docs/developer-guide/02-projects/cockpit-composer/index.md","sourceDirName":"developer-guide/02-projects/cockpit-composer","slug":"/developer-guide/projects/cockpit-composer/","permalink":"/docs/developer-guide/projects/cockpit-composer/","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/cockpit-composer/blob/main/README.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/osbuild/cockpit-composer/blob/main/README.md"},"sidebar":"developer","previous":{"title":"Project Overview","permalink":"/docs/developer-guide/projects/"},"next":{"title":"Cockpit-Composer Integration Test","permalink":"/docs/developer-guide/projects/cockpit-composer/testing"}}');var t=i(4848),o=i(8453);const r={custom_edit_url:"https://github.com/osbuild/cockpit-composer/blob/main/README.md"},l="Cockpit Composer",c={},d=[{value:"Install from official repositories",id:"install-from-official-repositories",level:2},{value:"Install from source code",id:"install-from-source-code",level:2},{value:"Install on MacOS (using a VM)",id:"install-on-macos-using-a-vm",level:2},{value:"Development instructions",id:"development-instructions",level:2},{value:"Install the development dependencies",id:"install-the-development-dependencies",level:3},{value:"Build and run",id:"build-and-run",level:3},{value:"Style linters",id:"style-linters",level:3},{value:"Build rpm",id:"build-rpm",level:3},{value:"Run integration test",id:"run-integration-test",level:3},{value:"Cockpit API",id:"cockpit-api",level:3},{value:"Automated maintenance",id:"automated-maintenance",level:2},{value:"License",id:"license",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["[!WARNING]\nThis project has been abandoned in favor of ",(0,t.jsx)(n.a,{href:"https://github.com/osbuild/image-builder-frontend/tree/main/cockpit",children:"cockpit-image-builder"})," starting from Fedora 42."]}),"\n"]}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"cockpit-composer",children:"Cockpit Composer"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://codecov.io/gh/osbuild/cockpit-composer",children:(0,t.jsx)(n.img,{src:"https://codecov.io/gh/osbuild/cockpit-composer/branch/main/graph/badge.svg",alt:"codecov"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"The web interface for on-premises Image Builder!"})}),"\n",(0,t.jsxs)(n.p,{children:["Image Builder generates custom images suitable for deploying systems or uploading to\nthe cloud. It integrates into ",(0,t.jsx)(n.a,{href:"https://cockpit-project.org/",children:"Cockpit"})," as a\nfrontend for ",(0,t.jsx)(n.a,{href:"https://github.com/osbuild",children:"osbuild"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"install-from-official-repositories",children:"Install from official repositories"}),"\n",(0,t.jsx)(n.p,{children:"Cockpit Composer can be installed on RHEL and Fedora systems using:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ dnf install cockpit-composer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Make sure to install/enable ",(0,t.jsx)(n.a,{href:"https://cockpit-project.org/",children:"Cockpit"})," with:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ systemctl enable --now cockpit.socket\n"})}),"\n",(0,t.jsx)(n.h2,{id:"install-from-source-code",children:"Install from source code"}),"\n",(0,t.jsx)(n.p,{children:"First download the code from Github:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ git clone https://github.com/osbuild/cockpit-composer.git\n    $ cd cockpit-composer/\n"})}),"\n",(0,t.jsx)(n.h2,{id:"install-on-macos-using-a-vm",children:"Install on MacOS (using a VM)"}),"\n",(0,t.jsx)(n.p,{children:"Running cockpit-composer on MacOS requires running a Fedora/CentOS/RHEL VM."}),"\n",(0,t.jsxs)(n.p,{children:["This installation focuses on a visual install. There are many tools to create a VM on Mac\nbut the following steps are focused on the open source VM host ",(0,t.jsx)(n.a,{href:"https://github.com/utmapp/UTM",children:"UTM"}),". Other VM tools should work similarly."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create/download an installer ",(0,t.jsx)(n.code,{children:".iso"}),". Using hosted ",(0,t.jsx)(n.a,{href:"https://console.redhat.com/insights/image-builder",children:"Image Builder"})," is a great way to create this installer with cockpit-composer and dependencies already installed."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Select ",(0,t.jsx)(n.code,{children:"Create a New Virtual Machine"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Assuming the installer is for ARM/AArch64 ",(0,t.jsx)(n.code,{children:"Virtualize"})," is the best selection. But UTM can also ",(0,t.jsx)(n.code,{children:"Emulate"})," x86_64. Select whichever is best for your system."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Select your installer as the ",(0,t.jsx)(n.code,{children:"Boot ISO Image"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Edit the VM settings but the defaults should be fine."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Make sure the VM's network is set to bridged so that you can access it from your host machine."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Click through installer steps."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If your image was not preinstalled with cockpit-composer follow the instructions in the ",(0,t.jsx)(n.strong,{children:"Install from official repositories"})," section."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Inside the running VM get the IP address. The command ",(0,t.jsx)(n.code,{children:"ip a"})," will show the network settings and will include the IP to access the VM."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In a browser, on the host machine, navigate to port 9090 on the VM's IP address. i.e. ",(0,t.jsx)(n.code,{children:"https://192.168.178.00:9090/"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Login and access Image Builder in Cockpit."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development-instructions",children:"Development instructions"}),"\n",(0,t.jsx)(n.p,{children:"It's easy to set up your local machine to develop on Cockpit Composer."}),"\n",(0,t.jsx)(n.h3,{id:"install-the-development-dependencies",children:"Install the development dependencies"}),"\n",(0,t.jsx)(n.p,{children:"On Fedora or Red Hat Enterprise Linux:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["First install Cockpit on your local machine as described in: ",(0,t.jsx)(n.a,{href:"https://cockpit-project.org/running.html",children:"https://cockpit-project.org/running.html"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Next install and start osbuild-composer:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ dnf install osbuild-composer cockpit\n    $ systemctl start osbuild-composer\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cockpit Composer uses Node.js during development. Node.js is not used at runtime. To make changes on Cockpit you'll want to install Node.js, NPM."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ dnf install nodejs npm\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In order to build an rpm, ",(0,t.jsx)(n.code,{children:"rpm-build"})," is required"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ dnf install rpm-build\n"})}),"\n",(0,t.jsx)(n.h3,{id:"build-and-run",children:"Build and run"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"To build Cockpit Composer, run:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ make build\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will create a ",(0,t.jsx)(n.code,{children:"public"})," directory which can be sym-linked into Cockpit as a plugin:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ mkdir -p ~/.local/share/cockpit\n    $ ln -s $(pwd)/public ~/.local/share/cockpit/composer\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now you can log into Cockpit Composer on your local machine at the following address. Use the same user and password that you used to log into your local user account."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://localhost:9090/composer",children:"https://localhost:9090/composer"})}),"\n",(0,t.jsxs)(n.p,{children:["Cockpit Composer can also be built in ",(0,t.jsx)(n.code,{children:"watch"})," mode so that it will rebuild on code changes without having to manually rerun ",(0,t.jsx)(n.code,{children:"make build"}),". This can be done using:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    npm ci\n    npm run watch\n"})}),"\n",(0,t.jsx)(n.h3,{id:"style-linters",children:"Style linters"}),"\n",(0,t.jsx)(n.p,{children:"We use eslint and prettier to enforce code style. To run the linters, run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ npm run lint\n    $ npm run prettier\n"})}),"\n",(0,t.jsx)(n.p,{children:"Any auto fixable errors can be corrected with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ npm run format\n"})}),"\n",(0,t.jsx)(n.h3,{id:"build-rpm",children:"Build rpm"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ make rpm\n"})}),"\n",(0,t.jsx)(n.h3,{id:"run-integration-test",children:"Run integration test"}),"\n",(0,t.jsx)(n.p,{children:"Run test without visually seeing what the browser is doing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    $ make check\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To learn more about testing see our ",(0,t.jsx)(n.a,{href:"https://github.com/osbuild/cockpit-composer/tree/main/test",children:"testing docs"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"cockpit-api",children:"Cockpit API"}),"\n",(0,t.jsx)(n.p,{children:"To keep Cockpit Composer working with Cockpit API all code should follow the following rules."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"All urls in the html and javascript need to use relative paths."}),"\n",(0,t.jsxs)(n.li,{children:["All requests to the API should be made using ",(0,t.jsx)(n.code,{children:"utils.apiFetch"}),". Any non API ",(0,t.jsx)(n.code,{children:"fetch"})," requests\nmust use ",(0,t.jsx)(n.code,{children:"credentials: 'same-origin'"})," so that cookies are included with those ajax requests."]}),"\n",(0,t.jsx)(n.li,{children:"Use hashes for navigation within the SPA so that cockpit can keep the top level location display\nup to date."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"automated-maintenance",children:"Automated maintenance"}),"\n",(0,t.jsxs)(n.p,{children:["It is important to keep the ",(0,t.jsx)(n.a,{href:"https://github.com/osbuild/cockpit-composer/tree/main/package.json",children:"NPM modules"})," up to date, to keep\nup with security updates and bug fixes. This is done automatically by Dependabot.\nwhich is run daily."]}),"\n",(0,t.jsx)(n.p,{children:"Similarly, translations are refreshed automatically by Weblate."}),"\n",(0,t.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,t.jsxs)(n.p,{children:["This source code is licensed under the MIT license found in the ",(0,t.jsx)(n.a,{href:"https://github.com/osbuild/cockpit-composer/tree/main/LICENSE.txt",children:(0,t.jsx)(n.code,{children:"LICENSE.txt"})})," file."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Made with \u2665 by the ",(0,t.jsx)(n.a,{href:"https://github.com/orgs/osbuild/people",children:"OSBuild team"}),", ",(0,t.jsx)(n.a,{href:"https://github.com/orgs/weldr/people",children:"Welder team"}),", ",(0,t.jsx)(n.a,{href:"https://github.com/orgs/cockpit-project/people",children:"Cockpit team"}),", and contributors"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);