"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[707],{93586:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"developer-guide/projects/osbuild/modules/stages/org.osbuild.tuned","title":"org.osbuild.tuned","description":"\x3c!--","source":"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.tuned.md","sourceDirName":"developer-guide/02-projects/osbuild/modules/stages","slug":"/developer-guide/projects/osbuild/modules/stages/org.osbuild.tuned","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.tuned","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.tuned.meta.json","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.tuned.meta.json"},"sidebar":"developer","previous":{"title":"org.osbuild.truncate","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.truncate"},"next":{"title":"org.osbuild.udev.rules","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.udev.rules"}}');var n=t(74848),r=t(28453);const i={custom_edit_url:"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.tuned.meta.json"},l="org.osbuild.tuned",d={},u=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function a(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"orgosbuildtuned",children:"org.osbuild.tuned"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Sets active TuneD profile."})}),"\n",(0,n.jsx)(s.p,{children:"The stage calls sets active TuneD profile to 'profiles' as if one called\n'tuned-adm profile <profile>'. In the most usual case, only one active profile\nis set. However in case multiple profiles are provided, then TuneD tries to\nmerge all profiles into active configuration. In case of conflicting values,\nthe value from the latest profile is used."}),"\n",(0,n.jsx)(s.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-json",children:'{\n  "additionalProperties": false,\n  "required": [\n    "profiles"\n  ],\n  "description": "Manually set TuneD profile.",\n  "properties": {\n    "profiles": {\n      "type": "array",\n      "description": "TuneD profile to activate. If multiple profiles are provided, TuneD will try to merge them.",\n      "minItems": 1,\n      "items": {\n        "type": "string",\n        "minLength": 1\n      }\n    }\n  }\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-json",children:"{}\n"})})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>l});var o=t(96540);const n={},r=o.createContext(n);function i(e){const s=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(r.Provider,{value:s},e.children)}}}]);