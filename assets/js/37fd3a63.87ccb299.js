"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[11766],{25810:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"developer-guide/projects/osbuild/modules/stages/org.osbuild.grub2","title":"org.osbuild.grub2","description":"\x3c!--","source":"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.grub2.md","sourceDirName":"developer-guide/02-projects/osbuild/modules/stages","slug":"/developer-guide/projects/osbuild/modules/stages/org.osbuild.grub2","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.grub2","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.grub2.meta.json","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.grub2.meta.json"},"sidebar":"developer","previous":{"title":"org.osbuild.grub2.legacy","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.grub2.legacy"},"next":{"title":"org.osbuild.gunzip","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.gunzip"}}');var o=t(74848),s=t(28453);const r={custom_edit_url:"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.grub2.meta.json"},d="org.osbuild.grub2",l={},a=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"orgosbuildgrub2",children:"org.osbuild.grub2"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Configure GRUB2 bootloader and set boot options"})}),"\n",(0,o.jsxs)(n.p,{children:["Configure the system to use GRUB2 as the bootloader, and set boot options.\nSets the GRUB2 boot/root filesystem to ",(0,o.jsx)(n.code,{children:"rootfs"}),". If a separated boot\npartition is used it can be specified via ",(0,o.jsx)(n.code,{children:"bootfs"}),". The file-systems\ncan be identified either via uuid (",(0,o.jsx)(n.code,{children:'\\{"uuid": "\\<uuid\\>"\\}'}),") or label\n(",(0,o.jsx)(n.code,{children:'\\{"label": "\\<label\\>"\\}'}),"). The kernel boot argument will be composed\nof the root file system id and additional options specified in\n",(0,o.jsx)(n.code,{children:"\\{kernel_opts\\}"}),", if any.\nConfigures GRUB2 to boot via the Boot Loader Specification\n(",(0,o.jsx)(n.a,{href:"https://systemd.io/BOOT_LOADER_SPECIFICATION",children:"https://systemd.io/BOOT_LOADER_SPECIFICATION"}),"), which is the default\nbehavior in Fedora 30 and later.\nThis stage will overwrite ",(0,o.jsx)(n.code,{children:"/etc/default/grub"}),", ",(0,o.jsx)(n.code,{children:"/boot/grub2/grubenv"}),", and\n",(0,o.jsx)(n.code,{children:"/boot/grub2/grub.cfg"}),". (Leading directories will be created if not present.)\nIf Legacy boot support is requested via ",(0,o.jsx)(n.code,{children:"legacy"})," this stage will also\noverwrite ",(0,o.jsx)(n.code,{children:"/boot/grub2/grub.cfg"})," and will copy the GRUB2 files from the\nbuildhost into the target tree:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"/usr/share/grub/unicode.pf2"}),"          -> ",(0,o.jsx)(n.code,{children:"/boot/grub2/fonts/"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"/usr/lib/grub/$platform/*.\\{mod,lst\\}"})," -> ",(0,o.jsx)(n.code,{children:"/boot/grub2/$platform/"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["NOTE: skips ",(0,o.jsx)(n.code,{children:"fdt.lst"}),", which is an empty file\nThe $platform variable (default: i386-pc) refers to target platform\nthat grub2 is mean to ran on (see grub-install(1)'s ",(0,o.jsx)(n.code,{children:"--target"}),")\nNB: with legacy support enabled, this stage will fail if the buildhost\ndoesn't have ",(0,o.jsx)(n.code,{children:"/usr/lib/grub/$platform/"})," and ",(0,o.jsx)(n.code,{children:"/usr/share/grub/unicode.pf2"}),".\nIf UEFI support is enabled via ",(0,o.jsx)(n.code,{children:'uefi: \\{"vendor": "\\<vendor\\>"\\}'})," this stage will\nalso write the ",(0,o.jsx)(n.code,{children:"grub.cfg"})," to ",(0,o.jsx)(n.code,{children:"boot/efi/EFI/\\<vendor\\>/grub.cfg"}),". EFI binaries\nand accompanying data can be installed from the built root via ",(0,o.jsx)(n.code,{children:"uefi.install"}),".\nBoth UEFI and Legacy can be specified at the same time (hybrid boot).\nIf ",(0,o.jsx)(n.code,{children:"uefi.unified"})," is specified or hybrid boot is enabled, the main grub config\nwill be written to ",(0,o.jsx)(n.code,{children:"boot/grub2/grub.cfg"})," and a redirect config will be placed\nin the EFI directory.\nIf the ",(0,o.jsx)(n.code,{children:"saved_entry"})," option is present it will result in an entry in the\n",(0,o.jsx)(n.code,{children:"grubenv"})," file of the same name. The grub config file contains logic so\nthat this variable will be used to select the next boot entry. This will\nalso make grub2-reboot and grub2-set-default tools work. It will also\nprevent newly installed non-default kernels (like e.g. the debug kernel)\nto be selected as default. The contents of variable needs to match the\ncorresponding loader entry, which currently is a combination of the\nmachine id and kernel NVRA, like e.g.:\n",(0,o.jsx)(n.code,{children:"ffffffffffffffffffffffffffffffff-5.6.6-300.fc32.x86_64"}),"\nIf ",(0,o.jsx)(n.code,{children:"saved_entry"})," is set it is advisable to set ",(0,o.jsx)(n.code,{children:"config.default"})," to\n",(0,o.jsx)(n.code,{children:"saved"}),' so that any re-creation of the grub configuration by the\nuser will preserve that functionality.\nSupport for "greenboot" can be turned on via the ',(0,o.jsx)(n.code,{children:"greenboot"})," option.\nGreenboot is the idea of automatically rolling back bad updates,\ni.e. updates that do not boot successfully. The implementation\nis split between the boot loader and a user space component.\nThe latter sets two variables ",(0,o.jsx)(n.code,{children:"boot_counter"}),", which indicates\nthe maximum number of boot attempts and ",(0,o.jsx)(n.code,{children:"boot_success"})," which\ntells the boot laoder if a previous boot was successful. The\nbootloader on the other hand will decrement the counter variable\nand reset the success indicator one.\nAn implementation of the user space component for rpm-ostree is\ncalled ",(0,o.jsx)(n.code,{children:"greenboot"}),".\nSupport for ignition (",(0,o.jsx)(n.a,{href:"https://github.com/coreos/ignition",children:"https://github.com/coreos/ignition"}),") can be turned\non via the ",(0,o.jsx)(n.code,{children:"ignition"})," option. If enabled, a 'ignition_firstboot' variable\nwill be created, which is meant to be included in the kernel command line.\nThe grub.cfg will then contain the necessary code to detect and source\nthe '/boot/ignition.firstboot' file and configure said 'ignition_firstboot'\nvariable appropriately. See the 'org.osbuild.ignition' stage for more\ninformation on that file."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "additionalProperties": false,\n  "oneOf": [\n    {\n      "required": [\n        "root_fs_uuid"\n      ]\n    },\n    {\n      "required": [\n        "rootfs"\n      ]\n    }\n  ],\n  "definitions": {\n    "uuid": {\n      "description": "Identify the file system by UUID",\n      "type": "string",\n      "oneOf": [\n        {\n          "pattern": "^[0-9A-Za-z]{8}(-[0-9A-Za-z]{4}){3}-[0-9A-Za-z]{12}$",\n          "examples": [\n            "9c6ae55b-cf88-45b8-84e8-64990759f39d"\n          ]\n        },\n        {\n          "pattern": "^[0-9A-Za-z]{4}-[0-9A-Za-z]{4}$",\n          "examples": [\n            "6699-AFB5"\n          ]\n        }\n      ]\n    },\n    "filesystem": {\n      "description": "Description of how to locate a file system",\n      "type": "object",\n      "oneOf": [\n        {\n          "required": [\n            "uuid"\n          ]\n        },\n        {\n          "required": [\n            "label"\n          ]\n        }\n      ],\n      "properties": {\n        "label": {\n          "description": "Identify the file system by label",\n          "type": "string"\n        },\n        "uuid": {\n          "$ref": "#/definitions/uuid"\n        }\n      }\n    },\n    "terminal": {\n      "description": "Terminal device",\n      "type": "array",\n      "items": {\n        "type": "string"\n      }\n    }\n  },\n  "properties": {\n    "compat_version": {\n      "type": "number",\n      "enum": [\n        1,\n        2\n      ],\n      "description": "The compatibility behavior to use. Old versions are just there for bug compatibility. You should always use the highest version available.",\n      "default": 1\n    },\n    "rootfs": {\n      "$ref": "#/definitions/filesystem"\n    },\n    "bootfs": {\n      "$ref": "#/definitions/filesystem"\n    },\n    "root_fs_uuid": {\n      "$ref": "#/definitions/uuid"\n    },\n    "boot_fs_uuid": {\n      "$ref": "#/definitions/uuid"\n    },\n    "kernel_opts": {\n      "description": "Additional kernel boot options",\n      "type": "string",\n      "default": ""\n    },\n    "legacy": {\n      "description": "Include legacy boot support",\n      "oneOf": [\n        {\n          "type": "boolean",\n          "default": false\n        },\n        {\n          "type": "string"\n        }\n      ]\n    },\n    "uefi": {\n      "description": "Include UEFI boot support",\n      "type": "object",\n      "required": [\n        "vendor"\n      ],\n      "properties": {\n        "vendor": {\n          "type": "string",\n          "description": "The vendor of the UEFI binaries (this is us)",\n          "examples": [\n            "fedora"\n          ],\n          "pattern": "^(.+)$"\n        },\n        "efi_src_dir": {\n          "type": "string",\n          "description": "The source path to use for the EFI/ binaries when installing is set to True",\n          "default": "/boot/efi/EFI"\n        },\n        "install": {\n          "description": "Install EFI binaries and data from the build root",\n          "type": "boolean",\n          "default": false\n        },\n        "unified": {\n          "description": "Main grub config in \'boot/grub2/grub.cfg\'",\n          "type": "boolean",\n          "default": false\n        }\n      }\n    },\n    "saved_entry": {\n      "description": "Set the variable of the same name in `grubenv`.",\n      "type": "string"\n    },\n    "write_defaults": {\n      "description": "Whether to write /etc/defaults/grub",\n      "type": "boolean",\n      "default": true\n    },\n    "write_cmdline": {\n      "description": "Include the kernel command line in `grubenv`",\n      "type": "boolean",\n      "default": true\n    },\n    "ignition": {\n      "description": "Include ignition support in the grub.cfg",\n      "type": "boolean",\n      "default": false\n    },\n    "greenboot": {\n      "description": "Include support for fallback counting",\n      "type": "boolean",\n      "default": false\n    },\n    "config": {\n      "description": "Configuration options for grub itself",\n      "type": "object",\n      "additionalProperties": false,\n      "properties": {\n        "default": {\n          "description": "Default boot entry",\n          "type": "string"\n        },\n        "disable_recovery": {\n          "type": "boolean"\n        },\n        "disable_submenu": {\n          "type": "boolean"\n        },\n        "distributor": {\n          "description": "Name of the distributor",\n          "type": "string"\n        },\n        "terminal": {\n          "$ref": "#/definitions/terminal"\n        },\n        "terminal_input": {\n          "$ref": "#/definitions/terminal"\n        },\n        "terminal_output": {\n          "$ref": "#/definitions/terminal"\n        },\n        "timeout": {\n          "description": "Timeout in seconds",\n          "type": "integer",\n          "minimum": 0,\n          "default": 0\n        },\n        "timeout_style": {\n          "type": "string",\n          "enum": [\n            "hidden",\n            "menu",\n            "countdown"\n          ]\n        },\n        "serial": {\n          "description": "The command to configure the serial console",\n          "type": "string"\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:"{}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(96540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);