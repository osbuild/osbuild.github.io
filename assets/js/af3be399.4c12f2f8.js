"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[4059],{2427:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"developer-guide/projects/cockpit-composer/testing","title":"Cockpit-Composer Integration Test","description":"\x3c!--","source":"@site/docs/developer-guide/02-projects/cockpit-composer/testing.md","sourceDirName":"developer-guide/02-projects/cockpit-composer","slug":"/developer-guide/projects/cockpit-composer/testing","permalink":"/docs/developer-guide/projects/cockpit-composer/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/cockpit-composer/blob/main/test/README.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/osbuild/cockpit-composer/blob/main/test/README.md"},"sidebar":"developer","previous":{"title":"index","permalink":"/docs/developer-guide/projects/cockpit-composer/"},"next":{"title":"composer-cli","permalink":"/docs/developer-guide/projects/composer-cli/"}}');var o=n(4848),r=n(8453);const i={custom_edit_url:"https://github.com/osbuild/cockpit-composer/blob/main/test/README.md"},c="Cockpit-Composer Integration Test",d={},l=[{value:"Requirement",id:"requirement",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Test Configuration",id:"test-configuration",level:2},{value:"Guidelines for writing tests",id:"guidelines-for-writing-tests",level:2},{value:"Code coverage from end-to-end tests",id:"code-coverage-from-end-to-end-tests",level:2},{value:"Code Style",id:"code-style",level:2}];function a(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"cockpit-composer-integration-test",children:"Cockpit-Composer Integration Test"})}),"\n",(0,o.jsx)(t.p,{children:"The integration test for Cockpit Composer! It is performed on the\napplication level and tests whether the business requirements are met\nregardless of app internal architecture, dependencies, data integrity and such.\nActually we need to follow the end-user flows and assert they get the intended\nexperience and focus on the behavior of the thing as the user would see it."}),"\n",(0,o.jsxs)(t.p,{children:["The integration tests are powered by ",(0,o.jsx)(t.a,{href:"https://github.com/cockpit-project/cockpit/tree/main/test",children:"Cockpit test\nframework"}),", which is simple and easy to\ndebug for test development."]}),"\n",(0,o.jsx)(t.h2,{id:"requirement",children:"Requirement"}),"\n",(0,o.jsx)(t.p,{children:"For testing, the following dependencies are required:"}),"\n",(0,o.jsxs)(t.p,{children:["$ sudo dnf install curl expect xz rpm-build chromium-headless ",(0,o.jsx)(t.br,{}),"\n","libvirt-daemon-kvm libvirt-client python3-libvirt"]}),"\n",(0,o.jsxs)(t.p,{children:["And ",(0,o.jsx)(t.code,{children:"chrome-remote-interface"})," and ",(0,o.jsx)(t.code,{children:"sizzle"})," Javascript libraries need to be installed:"]}),"\n",(0,o.jsx)(t.p,{children:"$ npm install"}),"\n",(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(t.p,{children:"Before running the tests, ensure Cockpit-Composer environment has been built:"}),"\n",(0,o.jsx)(t.p,{children:"$ make vm"}),"\n",(0,o.jsx)(t.p,{children:"To run all tests run the following:"}),"\n",(0,o.jsx)(t.p,{children:"$ make check"}),"\n",(0,o.jsx)(t.p,{children:"Alternatively, you can run individual tests. To list the individual test names you can run:"}),"\n",(0,o.jsx)(t.p,{children:"$ test/common/run-tests --test-dir=test/verify -l"}),"\n",(0,o.jsx)(t.p,{children:"And then run:"}),"\n",(0,o.jsx)(t.p,{children:"$ test/common/run-tests --test-dir=test/verify $TEST_NAME"}),"\n",(0,o.jsxs)(t.p,{children:["To run the tests with network, use the ",(0,o.jsx)(t.code,{children:"--enable-network"})," flag:"]}),"\n",(0,o.jsx)(t.p,{children:"$ test/common/run-tests --test-dir=test/verify --enable-network $TEST_NAME"}),"\n",(0,o.jsxs)(t.p,{children:["To see more verbose output from the test, use the ",(0,o.jsx)(t.code,{children:"--verbose"})," and/or ",(0,o.jsx)(t.code,{children:"--trace"})," flags:"]}),"\n",(0,o.jsx)(t.p,{children:"$ test/common/run-tests --test-dir=test/verify --verbose --trace $TEST_NAME"}),"\n",(0,o.jsxs)(t.p,{children:["In addition if you specify ",(0,o.jsx)(t.code,{children:"--sit"}),", then the test will wait on failure and allow you to log into\ncockpit and/or the test instance and diagnose the issue. An address will be printed of the test\ninstance."]}),"\n",(0,o.jsx)(t.p,{children:"$ test/common/run-tests --test-dir=test/verify --sit $TEST_NAME"}),"\n",(0,o.jsxs)(t.p,{children:["Normally each test starts its own chromium headless browser process on a separate random port. To\ninteractively follow what a test is doing, set environment variable ",(0,o.jsx)(t.code,{children:"$TEST_SHOW_BROWSER"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"$ TEST_SHOW_BROWSER=true test/common/run-tests --test-dir=test/verify $TEST_NAME"}),"\n",(0,o.jsx)(t.h2,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,o.jsx)(t.p,{children:"You can set these environment variables to configure the test suite:"}),"\n",(0,o.jsx)(t.p,{children:'TEST_OS    The OS to run the tests in.  Currently supported values:\n"fedora-34, rhel-8-6, rhel-9-0"\n"fedora-34" is the default'}),"\n",(0,o.jsx)(t.p,{children:"TEST_DATA  Where to find and store test machine images.  The\ndefault is the same directory that this README file is in."}),"\n",(0,o.jsx)(t.p,{children:"TEST_CDP_PORT  Attach to an actually running browser that is compatible with\nthe Chrome Debug Protocol, on the given port. Don't use this\nwith parallel tests."}),"\n",(0,o.jsx)(t.p,{children:'TEST_BROWSER  What browser should be used for testing. Currently supported values:\n"chromium"\n"firefox"\n"chromium" is the default.'}),"\n",(0,o.jsx)(t.p,{children:"TEST_SHOW_BROWSER  Set to run browser interactively. When not specified,\nbrowser is run in headless mode."}),"\n",(0,o.jsx)(t.h2,{id:"guidelines-for-writing-tests",children:"Guidelines for writing tests"}),"\n",(0,o.jsxs)(t.p,{children:["Tests decorated with ",(0,o.jsx)(t.code,{children:"@nondestructive"})," will all run against the same test\nmachine. The nondestructive test should clean up after itself and restore the\nstate of the machine, such that the next nondestructive test is not impacted."]}),"\n",(0,o.jsx)(t.p,{children:"A fast running test suite is more important than independent,\nsmall test cases."}),"\n",(0,o.jsx)(t.h2,{id:"code-coverage-from-end-to-end-tests",children:"Code coverage from end-to-end tests"}),"\n",(0,o.jsxs)(t.p,{children:["Before running the tests the application code must be instrumented with\nistanbul! Then inside the browser scope all coverage information is available\nfrom ",(0,o.jsx)(t.code,{children:"window.__coverage__"})," which needs to be passed back to the node scope\nand made available for the reporting tools to use."]}),"\n",(0,o.jsxs)(t.p,{children:["Please include helper method ",(0,o.jsx)(t.code,{children:"check_coverage()"})," at the end of each test.\nThis helper method will collect coverage result and save result into file\n",(0,o.jsx)(t.code,{children:".nyc_output/coverage-<HASH>.json"}),". The hash value is the sha256 sum of\nthe coverage report itself. Some cases may have identical coverage so\nthe number of json files will be equal or less to the number of test cases."]}),"\n",(0,o.jsx)(t.h2,{id:"code-style",children:"Code Style"}),"\n",(0,o.jsxs)(t.p,{children:["Python code in this project should follow\n",(0,o.jsx)(t.a,{href:"https://www.flake8rules.com/",children:"Flake8"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);