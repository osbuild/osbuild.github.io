"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[76633],{14097:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"developer-guide/projects/image-builder/usage","title":"Usage","description":"\x3c!--","source":"@site/docs/developer-guide/02-projects/image-builder/01-usage.md","sourceDirName":"developer-guide/02-projects/image-builder","slug":"/developer-guide/projects/image-builder/usage","permalink":"/docs/developer-guide/projects/image-builder/usage","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/image-builder-cli/blob/main/doc/01-usage.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"custom_edit_url":"https://github.com/osbuild/image-builder-cli/blob/main/doc/01-usage.md"},"sidebar":"developer","previous":{"title":"Installation","permalink":"/docs/developer-guide/projects/image-builder/installation"},"next":{"title":"Frequently Asked Questions","permalink":"/docs/developer-guide/projects/image-builder/faq"}}');var s=n(74848),a=n(28453);const l={custom_edit_url:"https://github.com/osbuild/image-builder-cli/blob/main/doc/01-usage.md"},d="Usage",t={},o=[{value:"<code>image-builder list</code>",id:"image-builder-list",level:2},{value:"Format",id:"format",level:3},{value:"Filtering",id:"filtering",level:3},{value:"Distribution",id:"distribution",level:3},{value:"Type",id:"type",level:3},{value:"Architecture",id:"architecture",level:3},{value:"Combinations",id:"combinations",level:3},{value:"<code>image-builder build</code>",id:"image-builder-build",level:2},{value:"<code>image-builder describe</code>",id:"image-builder-describe",level:2},{value:"<code>image-builder manifest</code>",id:"image-builder-manifest",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"usage",children:"Usage"})}),"\n",(0,s.jsxs)(i.p,{children:["After ",(0,s.jsx)(i.a,{href:"/docs/developer-guide/projects/image-builder/installation",children:"installation"})," you probably want to use ",(0,s.jsx)(i.code,{children:"image-builder"}),". A general workflow would be to find the image type you want to build and then build it."]}),"\n",(0,s.jsxs)(i.p,{children:["Let's take a look at the available ",(0,s.jsx)(i.code,{children:"x86_64"})," image types for Fedora 41 and build one of them."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder list --filter arch:x86_64 --filter distro:fedora-41\nfedora-41 type:ami arch:x86_64\nfedora-41 type:container arch:x86_64\nfedora-41 type:image-installer arch:x86_64\nfedora-41 type:iot-bootable-container arch:x86_64\nfedora-41 type:iot-commit arch:x86_64\nfedora-41 type:iot-container arch:x86_64\nfedora-41 type:iot-installer arch:x86_64\nfedora-41 type:iot-qcow2-image arch:x86_64\nfedora-41 type:iot-raw-image arch:x86_64\nfedora-41 type:iot-simplified-installer arch:x86_64\nfedora-41 type:live-installer arch:x86_64\nfedora-41 type:minimal-raw arch:x86_64\nfedora-41 type:oci arch:x86_64\nfedora-41 type:openstack arch:x86_64\nfedora-41 type:ova arch:x86_64\nfedora-41 type:qcow2 arch:x86_64\nfedora-41 type:vhd arch:x86_64\nfedora-41 type:vmdk arch:x86_64\nfedora-41 type:wsl arch:x86_64\n$ sudo image-builder build --distro fedora-41 qcow2\n# ...\n"})}),"\n",(0,s.jsx)(i.h2,{id:"image-builder-list",children:(0,s.jsx)(i.code,{children:"image-builder list"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"list"})," command for ",(0,s.jsx)(i.code,{children:"image-builder"})," lists the available built-in image types that can be built for the ",(0,s.jsx)(i.a,{href:"/docs/developer-guide/projects/image-builder/faq#built-in-distributions",children:"built-in distributions"}),"."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder list\n# ... long list ...\n"})}),"\n",(0,s.jsx)(i.h3,{id:"format",children:"Format"}),"\n",(0,s.jsxs)(i.p,{children:["The output format used by ",(0,s.jsx)(i.code,{children:"list"})," can be swapped with the ",(0,s.jsx)(i.code,{children:"--format"})," flag. Available types are ",(0,s.jsx)(i.code,{children:"text"})," (for display in a terminal) and ",(0,s.jsx)(i.code,{children:"json"})," which can be useful to consume programmatically:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:'$ image-builder list --format=json | jq \'.[0]\'\n{\n  "distro": {\n    "name": "centos-9"\n  },\n  "arch": {\n    "name": "aarch64"\n  },\n  "image_type": {\n    "name": "ami"\n  }\n}\n'})}),"\n",(0,s.jsx)(i.h3,{id:"filtering",children:"Filtering"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"list"})," output can be filtered with the ",(0,s.jsx)(i.code,{children:"--filter"})," argument."]}),"\n",(0,s.jsx)(i.h3,{id:"distribution",children:"Distribution"}),"\n",(0,s.jsxs)(i.p,{children:["To filter on a given distribution, one can use ",(0,s.jsx)(i.code,{children:"--filter"})," with the ",(0,s.jsx)(i.code,{children:"distro:"})," prefix:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder list --filter distro:fedora-41\n# ... long list ...\n"})}),"\n",(0,s.jsx)(i.h3,{id:"type",children:"Type"}),"\n",(0,s.jsxs)(i.p,{children:["To filter on a given ",(0,s.jsx)(i.a,{href:"/docs/developer-guide/projects/image-builder/faq#image-types",children:"image type"})," the ",(0,s.jsx)(i.code,{children:"type:"})," prefix:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder list --filter type:qcow2\n# ... long list ...\n"})}),"\n",(0,s.jsx)(i.h3,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsxs)(i.p,{children:["To filter on a given architecture use the ",(0,s.jsx)(i.code,{children:"arch:"})," prefix:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder list --filter arch:aarch64\n# ... long list ...\n"})}),"\n",(0,s.jsx)(i.h3,{id:"combinations",children:"Combinations"}),"\n",(0,s.jsx)(i.p,{children:"Filters can be combined to narrow the list further."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder list --filter type:qcow2 --filter distro:fedora-41\n# ... list ...\n"})}),"\n",(0,s.jsx)(i.h2,{id:"image-builder-build",children:(0,s.jsx)(i.code,{children:"image-builder build"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"build"})," command builds images of a given ",(0,s.jsx)(i.a,{href:"/docs/developer-guide/projects/image-builder/faq#image-types",children:"image type"}),", for example:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ sudo image-builder build minimal-raw\n# ... progress ...\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"build"})," command requires root privileges in many cases as ",(0,s.jsx)(i.code,{children:"image-builder"})," needs access to loopback devices and ",(0,s.jsx)(i.code,{children:"mount"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["By default the ",(0,s.jsx)(i.code,{children:"build"})," command uses the same distribution and version as the host system, you can pass another distribution and version with the ",(0,s.jsx)(i.code,{children:"--distro"})," argument:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ sudo image-builder build --distro fedora-43 minimal-raw\n# ... progress ...\n"})}),"\n",(0,s.jsxs)(i.p,{children:["When passed ",(0,s.jsx)(i.code,{children:"--arch"})," ",(0,s.jsx)(i.code,{children:"image-builder"})," will try to do an experimental cross-architecture build. Note that not all image types are available for all architectures."]}),"\n",(0,s.jsx)(i.p,{children:"Cross-architecture builds are much slower than being able to build on native hardware. However, if no native hardware is available they might be an acceptable compromise."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:'$ sudo image-builder build --arch s390x qcow2\nWARNING: using experimental cross-architecture building to build "s390x"\n# ... progress ...\n'})}),"\n",(0,s.jsx)(i.h2,{id:"image-builder-describe",children:(0,s.jsx)(i.code,{children:"image-builder describe"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"describe"})," command outputs structured information about an image without building it. It lists the packages that would be used to build the images and the partition tables."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder describe minimal-raw\n@WARNING - the output format is not stable yet and may change\ndistro: fedora-43\ntype: minimal-raw-zst\narch: x86_64\nos_version: \"43\"\nbootmode: uefi\npartition_type: gpt\ndefault_filename: disk.raw.zst\nbuild_pipelines:\n  - build\npayload_pipelines:\n  - os\n  - image\n  - zstd\npackages:\n  build:\n    include:\n      - coreutils\n      - dosfstools\n      - e2fsprogs\n      - glibc\n      - policycoreutils\n      - python3\n      - rpm\n      - selinux-policy-targeted\n      - systemd\n      - xz\n      - zstd\n    exclude: []\n  os:\n    include:\n      - '@core'\n      - NetworkManager-wifi\n      - brcmfmac-firmware\n      - dosfstools\n      - dracut-config-generic\n      - e2fsprogs\n      - efibootmgr\n      - grub2-efi-x64\n      - initial-setup\n      - iwlwifi-mvm-firmware\n      - kernel\n      - libxkbcommon\n      - realtek-firmware\n      - selinux-policy-targeted\n      - shim-x64\n    exclude:\n      - dracut-config-rescue\n      - firewalld\n"})}),"\n",(0,s.jsxs)(i.p,{children:["By default the ",(0,s.jsx)(i.code,{children:"describe"})," command uses the same distribution and version as the host system, you can pass another distribution and version with the ",(0,s.jsx)(i.code,{children:"--distro"})," argument:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder describe --distro fedora-43 minimal-raw\n# ... output ...\n"})}),"\n",(0,s.jsxs)(i.p,{children:["When passed ",(0,s.jsx)(i.code,{children:"--arch"})," ",(0,s.jsx)(i.code,{children:"image-builder"})," will show the description for that architecture:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder describe --arch aarch64 minimal-raw\n# ... output ...\n"})}),"\n",(0,s.jsx)(i.h2,{id:"image-builder-manifest",children:(0,s.jsx)(i.code,{children:"image-builder manifest"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"manifest"})," command outputs an ",(0,s.jsx)(i.a,{href:"https://github.com/osbuild/osbuild",children:"osbuild"})," manifest for an image. This manifest contains all the steps performed to assemble the eventual image but the image itself is not created."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder manifest minimal-raw\n# ... json ...\n"})}),"\n",(0,s.jsxs)(i.p,{children:["By default the ",(0,s.jsx)(i.code,{children:"manifest"})," command uses the same distribution and version as the host system, you can pass another distribution and version with the ",(0,s.jsx)(i.code,{children:"--distro"})," argument:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder manifest --distro fedora-43 minimal-raw\n# ... json ...\n"})}),"\n",(0,s.jsxs)(i.p,{children:["When passed ",(0,s.jsx)(i.code,{children:"--arch"})," ",(0,s.jsx)(i.code,{children:"image-builder"})," will show the manifest for that architecture:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:"$ image-builder manifest --arch aarch64 minimal-raw\n# ... output ...\n"})}),"\n",(0,s.jsx)(i.h1,{id:"blueprints",children:"Blueprints"}),"\n",(0,s.jsxs)(i.p,{children:["Images can be customized with ",(0,s.jsx)(i.a,{href:"https://osbuild.org/docs/user-guide/blueprint-reference",children:"blueprints"}),". For example we could build the ",(0,s.jsx)(i.code,{children:"qcow2"})," we built above with some customizations applied."]}),"\n",(0,s.jsxs)(i.p,{children:["We'll be adding the ",(0,s.jsx)(i.code,{children:"nginx"}),", and ",(0,s.jsx)(i.code,{children:"haproxy"})," packages and enabling their services so they start on boot. We'll also add a user by the name ",(0,s.jsx)(i.code,{children:"user"})," with an ssh key and set the hostname of the machine:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-console",children:'$ cat blueprint.toml\npackages = [\n    { name = "nginx" },\n    { name = "haproxy" },\n]\n\n[customizations]\nhostname = "mynewmachine.home.arpa"\n\n[customizations.services]\nenabled = ["nginx", "haproxy"]\n\n[[customizations.user]]\nname = "user"\nkey = "ssh-ed25519 AAAAC..."\n$ sudo image-builder build --blueprint blueprint.toml --distro fedora-41 qcow2\n# ...\n'})})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>d});var r=n(96540);const s={},a=r.createContext(s);function l(e){const i=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(a.Provider,{value:i},e.children)}}}]);