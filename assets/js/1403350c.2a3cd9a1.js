"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[7672],{54851:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"developer-guide/projects/osbuild/modules/stages/org.osbuild.keymap","title":"org.osbuild.keymap","description":"\x3c!--","source":"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.keymap.md","sourceDirName":"developer-guide/02-projects/osbuild/modules/stages","slug":"/developer-guide/projects/osbuild/modules/stages/org.osbuild.keymap","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.keymap","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.keymap.meta.json","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.keymap.meta.json"},"sidebar":"developer","previous":{"title":"org.osbuild.kernel-cmdline","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.kernel-cmdline"},"next":{"title":"org.osbuild.kickstart","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.kickstart"}}');var t=o(74848),i=o(28453);const r={custom_edit_url:"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.keymap.meta.json"},a="org.osbuild.keymap",d={},l=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"orgosbuildkeymap",children:"org.osbuild.keymap"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Set image's default keymap for vconsole and X11 keyboard."})}),"\n",(0,t.jsxs)(s.p,{children:["The 'keymap' option sets the default console keyboard layout for vconsole.\nIts value is a keymap, such as 'us' or 'de-latin1'.\nRemoves any existing /etc/vconsole.conf, then runs ",(0,t.jsx)(s.code,{children:"systemd-firstboot"})," with the\n",(0,t.jsx)(s.code,{children:"--keymap"})," option, which sets KEYMAP in /etc/vconsole.conf. If ",(0,t.jsx)(s.code,{children:"font"})," is given\nwill additionally set the FONT attribute.\nThe 'x11-keymap' option configures the X11 keyboard settings. The value of\nthe option is a dictionary with keys representing settings which can be\nconfigured. Currently, only the 'layouts' setting can be configured. Its value\nis a list of strings, representing the specific layouts, which should\nbe configured for the X11 keyboard.\nValid keymaps are generally found in /lib/kbd/keymaps."]}),"\n",(0,t.jsx)(s.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "additionalProperties": false,\n  "required": [\n    "keymap"\n  ],\n  "properties": {\n    "keymap": {\n      "type": "string",\n      "description": "Name of keymap to use for vconsole."\n    },\n    "x11-keymap": {\n      "additionalProperties": false,\n      "type": "object",\n      "description": "Configure X11 keyboard.",\n      "required": [\n        "layouts"\n      ],\n      "properties": {\n        "layouts": {\n          "type": "array",\n          "description": "List of keyboard mappings to configure.",\n          "minItems": 1,\n          "items": {\n            "type": "string",\n            "minLength": 2\n          }\n        }\n      }\n    },\n    "font": {\n      "type": "string",\n      "description": "Configures the console font."\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:"{}\n"})})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,o)=>{o.d(s,{R:()=>r,x:()=>a});var n=o(96540);const t={},i=n.createContext(t);function r(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);