"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[985],{60282:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"developer-guide/index","title":"Developer Guide","description":"In this section, you will find a description of the source code in osbuild organization.","source":"@site/docs/developer-guide/00-index.md","sourceDirName":"developer-guide","slug":"/developer-guide/index","permalink":"/docs/developer-guide/index","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/osbuild.github.io/tree/main/docs/developer-guide/00-index.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{},"sidebar":"developer","next":{"title":"General Topics","permalink":"/docs/developer-guide/general/"}}');var i=o(74848),r=o(28453);const t={},d="Developer Guide",c={},l=[];function a(e){const s={code:"code",h1:"h1",header:"header",img:"img",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"developer-guide",children:"Developer Guide"})}),"\n",(0,i.jsxs)(s.p,{children:["In this section, you will find a description of the source code in ",(0,i.jsx)(s.code,{children:"osbuild"})," organization."]}),"\n",(0,i.jsxs)(s.p,{children:["The following scheme describes how separate components communicate with each other:\n",(0,i.jsx)(s.img,{src:o(26342).A+"",width:"1248",height:"528"})]}),"\n",(0,i.jsxs)(s.p,{children:["In the very basic use case where ",(0,i.jsx)(s.code,{children:"osbuild-composer"}),' is running locally, the "pool of workers" also lives on the user\'s host machine. The ',(0,i.jsx)(s.code,{children:"osbuild-composer"})," and ",(0,i.jsx)(s.code,{children:"osbuild-worker"})," processes are spawned by systemd. We don't support any other means of spawning these processes, as they rely on systemd to open sockets, create state directories etc. Additionally, ",(0,i.jsx)(s.code,{children:"osbuild-worker"})," spawns osbuild as a subprocess to create the image itself. The whole image building machinery is spawned from a user process, for example, ",(0,i.jsx)(s.code,{children:"composer-cli"}),"."]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},26342:(e,s,o)=>{o.d(s,{A:()=>n});const n=o.p+"assets/images/osbuild-composer-71e2d4e4e39e0f62c7b2a09795d33dd4.svg"},28453:(e,s,o)=>{o.d(s,{R:()=>t,x:()=>d});var n=o(96540);const i={},r=n.createContext(i);function t(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);