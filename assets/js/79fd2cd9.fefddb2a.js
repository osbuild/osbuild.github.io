"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[29385],{18998:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree","title":"org.osbuild.ostree","description":"\x3c!--","source":"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.ostree.md","sourceDirName":"developer-guide/02-projects/osbuild/modules/stages","slug":"/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.ostree.meta.json","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.ostree.meta.json"},"sidebar":"developer","previous":{"title":"org.osbuild.ostree.init","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.init"},"next":{"title":"org.osbuild.ostree.os-init","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.os-init"}}');var s=t(74848),i=t(28453);const r={custom_edit_url:"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.ostree.meta.json"},d="org.osbuild.ostree",a={},l=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"orgosbuildostree",children:"org.osbuild.ostree"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.em,{children:[(0,s.jsx)(n.em,{children:"WARNING: This stage is deprecated and shouldn't be used when defining new\npipelines. Please use the individual ostree."})," stages instead."]}),"*"]}),"\n",(0,s.jsxs)(n.p,{children:["Initialize the sysroot and pull and deploy an OStree commit\nInitializes a clean ostree based system root, pulls the given ",(0,s.jsx)(n.code,{children:"commit"})," and\ncreates a deployment from it using ",(0,s.jsx)(n.code,{children:"osname"})," as the new stateroot (see [1]).\nSince OStree internally uses a hardlink farm to create the file system tree\nfor the deployment from the commit data, the mountpoints for the final image\nneed to be supplied via the ",(0,s.jsx)(n.code,{children:"mounts"})," option, as hardlinks must not span\nacross file systems and therefore the boundaries need to be known when doing\nthe deployment.\nCreating a deployment also entails generating the Boot Loader Specification\nentries to boot the system, which contain this the kernel command line.\nThe ",(0,s.jsx)(n.code,{children:"rootfs"})," option can be used to indicate the root file system, containing\nthe sysroot and the deployments. Additional kernel options can be passed via\n",(0,s.jsx)(n.code,{children:"kernel_opts"}),".\n[1] ",(0,s.jsx)(n.a,{href:"https://ostree.readthedocs.io/en/latest/manual/deployment/",children:"https://ostree.readthedocs.io/en/latest/manual/deployment/"})]}),"\n",(0,s.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:"{}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "inputs": {\n    "type": "object",\n    "additionalProperties": false,\n    "required": [\n      "commit"\n    ],\n    "properties": {\n      "commit": {\n        "type": "object",\n        "additionalProperties": true\n      }\n    }\n  },\n  "options": {\n    "required": [\n      "osname"\n    ],\n    "properties": {\n      "mounts": {\n        "description": "Mount points of the final file system",\n        "type": "array",\n        "items": {\n          "description": "Description of one mount point",\n          "type": "object",\n          "required": [\n            "path"\n          ],\n          "properties": {\n            "path": {\n              "description": "The path of the mount point",\n              "type": "string"\n            },\n            "mode": {\n              "description": "The mode of the mount point",\n              "type": "integer",\n              "default": 493\n            }\n          }\n        }\n      },\n      "osname": {\n        "description": "Name of the stateroot to be used in the deployment",\n        "type": "string"\n      },\n      "kernel_opts": {\n        "description": "Additional kernel command line options",\n        "type": "array",\n        "items": {\n          "description": "A single kernel command line option",\n          "type": "string"\n        }\n      },\n      "ref": {\n        "description": "OStree ref to create and use for deployment",\n        "type": "string"\n      },\n      "remotes": {\n        "description": "Configure remotes for the system repository",\n        "type": "array",\n        "items": {\n          "description": "Description of a remote",\n          "type": "object",\n          "required": [\n            "name",\n            "url"\n          ],\n          "properties": {\n            "name": {\n              "description": "Identifier for the remote",\n              "type": "string"\n            },\n            "url": {\n              "description": "URL of the remote",\n              "type": "string"\n            },\n            "branches": {\n              "type": "array",\n              "items": {\n                "description": "Configured branches for the remote",\n                "type": "string"\n              }\n            },\n            "gpgkeys": {\n              "type": "array",\n              "items": {\n                "description": "GPG keys for the remote to verify commits",\n                "type": "string"\n              }\n            }\n          }\n        }\n      },\n      "rootfs": {\n        "description": "Identifier to locate the root file system",\n        "type": "object",\n        "oneOf": [\n          {\n            "required": [\n              "uuid"\n            ]\n          },\n          {\n            "required": [\n              "label"\n            ]\n          }\n        ],\n        "properties": {\n          "label": {\n            "description": "Identify the root file system by label",\n            "type": "string"\n          },\n          "uuid": {\n            "description": "Identify the root file system by UUID",\n            "type": "string"\n          }\n        }\n      },\n      "populate_var": {\n        "description": "Populate $stateroot/var via systemd-tmpfiles",\n        "type": "boolean",\n        "default": false\n      }\n    }\n  }\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);