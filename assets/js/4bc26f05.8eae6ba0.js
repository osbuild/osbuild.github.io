"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[22027],{80140:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"developer-guide/projects/osbuild-composer/HACKING","title":"Hacking on osbuild-composer","description":"\x3c!--","source":"@site/docs/developer-guide/02-projects/osbuild-composer/HACKING.md","sourceDirName":"developer-guide/02-projects/osbuild-composer","slug":"/developer-guide/projects/osbuild-composer/HACKING","permalink":"/docs/developer-guide/projects/osbuild-composer/HACKING","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/osbuild-composer/blob/main/HACKING.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/osbuild/osbuild-composer/blob/main/HACKING.md"},"sidebar":"developer","previous":{"title":"Deploying osbuild-composer","permalink":"/docs/developer-guide/projects/osbuild-composer/DEPLOYING"},"next":{"title":"Local Cloud API Development","permalink":"/docs/developer-guide/projects/osbuild-composer/localcloud"}}');var i=n(74848),r=n(28453);const t={custom_edit_url:"https://github.com/osbuild/osbuild-composer/blob/main/HACKING.md"},c="Hacking on osbuild-composer",l={},d=[{value:"Virtual Machine",id:"virtual-machine",level:2},{value:"Containers",id:"containers",level:2},{value:"Build and run",id:"build-and-run",level:3},{value:"Shortening the loop",id:"shortening-the-loop",level:2},{value:"Accessing Cloud API",id:"accessing-cloud-api",level:2}];function a(e){const o={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"hacking-on-osbuild-composer",children:"Hacking on osbuild-composer"})}),"\n",(0,i.jsx)(o.h2,{id:"virtual-machine",children:"Virtual Machine"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.em,{children:"osbuild-composer"})," cannot be run from the source tree, but has to be installed\nonto a system. We recommend doing this by building rpms, with:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"dnf install fedora-packager\ndnf builddep osbuild-composer\nmake rpm\n"})}),"\n",(0,i.jsxs)(o.p,{children:["This will build rpms from the latest git HEAD (remember to commit changes), for\nthe current operating system, with a version that contains the commit hash. The\npackages end up in ",(0,i.jsx)(o.code,{children:"./rpmbuild/RPMS/$arch"}),"."]}),"\n",(0,i.jsx)(o.p,{children:"RPMS are easiest to deal with when they're in a dnf repository. To turn this\ndirectory into a dnf repository and serve it on localhost:8000, run:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"createrepo_c ./rpmbuild/RPMS/x86_64\npython3 -m http.server --directory ./rpmbuild/RPMS/x86_64 8000\n"})}),"\n",(0,i.jsx)(o.p,{children:"To start a ephemeral virtual machine using this repository, run:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"tools/deploy-qemu IMAGE tools/deploy/test\n"})}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.code,{children:"IMAGE"})," has to be a path to an cloud-init-enabled image matching the host\noperating system, because that's what the packages were built for above.\nNote that the Fedora/RHEL cloud images might be too small for some tests\nto pass. Run ",(0,i.jsx)(o.code,{children:"qemu-img resize IMAGE 10G"})," to grow them, cloud-init's growpart\nmodule will grow the root partition automatically during boot."]}),"\n",(0,i.jsxs)(o.p,{children:["The second argument points to a directory from which cloud-init user-data is\ngenerated (see ",(0,i.jsx)(o.code,{children:"tools/gen-user-data"})," for details). The one given above tries to\nmimic what is run on ",(0,i.jsx)(o.em,{children:"osbuild-composer"}),"'s continuous integration\ninfrastructure, i.e., installing ",(0,i.jsx)(o.code,{children:"osbuild-composer-tests"})," and starting the\nservice."]}),"\n",(0,i.jsxs)(o.p,{children:["The virtual machine uses qemu's ",(0,i.jsx)(o.a,{href:"https://wiki.qemu.org/Documentation/Networking#User_Networking_.28SLIRP.29",children:"user networking"}),", forwarding port 22 to\nthe host's 2222 and 443 to 4430. You can log into the running machine with"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"ssh admin@localhost -p 2222\n"})}),"\n",(0,i.jsxs)(o.p,{children:["The password is ",(0,i.jsx)(o.code,{children:"foobar"}),". Stopping the machine loses all data."]}),"\n",(0,i.jsx)(o.p,{children:"For a quick compile and debug cycle, we recommend iterating code using thorough\nunit tests before going through the full workflow described above."}),"\n",(0,i.jsx)(o.h2,{id:"containers",children:"Containers"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.em,{children:"osbuild-composer"})," and ",(0,i.jsx)(o.em,{children:"osbuild-composer-worker"})," can be run using Docker\ncontainers. Building and starting containers is generally faster than building\nRPMs and installing them in a VM, so this method is more convenient for\ndeveloping and testing changes quickly. However, using this method has several\ndownsides:"]}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["It doesn't build the RPMs so the ",(0,i.jsx)(o.code,{children:".spec"})," file isn't tested."]}),"\n",(0,i.jsx)(o.li,{children:"The environment is quite different from production (e.g., installation paths,\nprivileges and permissions)."}),"\n",(0,i.jsx)(o.li,{children:"The setup is not complete for all required services, so some functionality\nisn't available for testing this way (e.g., Koji Hub and all its dependent\nservices)."}),"\n"]}),"\n",(0,i.jsxs)(o.p,{children:["The containers are a good way to quickly test small changes, but before\nsubmitting a Pull Request, it's recommended to run through all the tests using\nthe ",(0,i.jsx)(o.a,{href:"#virtual-machine",children:"Virtual Machine"})," setup described above."]}),"\n",(0,i.jsx)(o.h3,{id:"build-and-run",children:"Build and run"}),"\n",(0,i.jsx)(o.p,{children:"To build the containers run:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"docker-compose build\n"})}),"\n",(0,i.jsx)(o.p,{children:"To start the containers run:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"docker-compose up\n"})}),"\n",(0,i.jsxs)(o.p,{children:["You can send requests to the ",(0,i.jsx)(o.em,{children:"osbuild-composer"})," container by entering the devel\ncontainer and running:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"curl -k --cert /etc/osbuild-composer/client-crt.pem --key /etc/osbuild-composer/client-key.pem https://172.30.0.10:8080/api/composer-koji/v1/status\n"})}),"\n",(0,i.jsxs)(o.p,{children:["To rebuild the containers after a change, add the ",(0,i.jsx)(o.code,{children:"--build"})," flag to the ",(0,i.jsx)(o.code,{children:"docker-compose"})," command:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"docker-compose up --build\n"})}),"\n",(0,i.jsx)(o.h2,{id:"shortening-the-loop",children:"Shortening the loop"}),"\n",(0,i.jsx)(o.p,{children:"For some components, it is possible to install distribution packages first and then only to replace binaries which may or may not work for smaller changes."}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"systemctl stop osbuild-composer.service osbuild-composer.socket osbuild-local-worker.socket\nmake build && sudo install -m755 bin/osbuild-composer bin/osbuild-worker /usr/libexec/osbuild-composer/\nsystemctl start osbuild-composer.socket osbuild-local-worker.socket\n"})}),"\n",(0,i.jsx)(o.h2,{id:"accessing-cloud-api",children:"Accessing Cloud API"}),"\n",(0,i.jsx)(o.p,{children:"You can use curl to access the Cloud API:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"curl --unix-socket /run/cloudapi/api.socket -XGET http://localhost/api/image-builder-composer/v2/openapi\n"})})]})}function u(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>t,x:()=>c});var s=n(96540);const i={},r=s.createContext(i);function t(e){const o=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(r.Provider,{value:o},e.children)}}}]);