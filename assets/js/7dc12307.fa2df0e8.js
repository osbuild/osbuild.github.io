"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[3636],{2968:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"developer-guide/projects/osbuild/modules/stages/org.osbuild.qemu","title":"org.osbuild.qemu","description":"\x3c!--","source":"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.qemu.md","sourceDirName":"developer-guide/02-projects/osbuild/modules/stages","slug":"/developer-guide/projects/osbuild/modules/stages/org.osbuild.qemu","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.qemu","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.qemu.meta.json","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.qemu.meta.json"},"sidebar":"developer","previous":{"title":"org.osbuild.pwquality.conf","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.pwquality.conf"},"next":{"title":"org.osbuild.resolv-conf","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.resolv-conf"}}');var o=t(4848),s=t(8453);const r={custom_edit_url:"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.qemu.meta.json"},d="org.osbuild.qemu",a={},p=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"orgosbuildqemu",children:"org.osbuild.qemu"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Convert a disk image to a different format."})}),"\n",(0,o.jsxs)(n.p,{children:["Convert the disk image specified via the ",(0,o.jsx)(n.code,{children:"image"})," input to the\nformat specified in ",(0,o.jsx)(n.code,{children:"format"}),". Currently supported types are:\nqcow2, vdi, vmdk, vpc, vhdx.\nSome formats support format specific options:\nqcow2: The compatibility version can be specified via ",(0,o.jsx)(n.code,{children:"compat"}),".\nBuildhost commands used: ",(0,o.jsx)(n.code,{children:"qemu-img"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:"{}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "definitions": {\n    "qcow2": {\n      "description": "Create a qcow2 image",\n      "type": "object",\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false,\n      "properties": {\n        "type": {\n          "description": "The type of the format, here \'qcow2\'",\n          "type": "string",\n          "enum": [\n            "qcow2"\n          ]\n        },\n        "compression": {\n          "description": "Enable/disable compression of the qcow2 image",\n          "type": "boolean",\n          "default": true\n        },\n        "compat": {\n          "description": "The qcow2-compatibility-version to use",\n          "type": "string"\n        }\n      }\n    },\n    "vdi": {\n      "description": "Create a vdi image",\n      "type": "object",\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false,\n      "properties": {\n        "type": {\n          "description": "The type of the format, here \'vdi\'",\n          "type": "string",\n          "enum": [\n            "vdi"\n          ]\n        }\n      }\n    },\n    "vmdk": {\n      "description": "Create a vmdk image",\n      "type": "object",\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false,\n      "properties": {\n        "type": {\n          "description": "The type of the format, here \'vmdk\'",\n          "type": "string",\n          "enum": [\n            "vmdk"\n          ]\n        },\n        "adapter_type": {\n          "description": "Virtual adapter type",\n          "type": "string",\n          "enum": [\n            "ide",\n            "lsilogic",\n            "buslogic",\n            "legacyESX"\n          ]\n        },\n        "compat6": {\n          "description": "VMDK version 6 image",\n          "type": "boolean",\n          "default": false\n        },\n        "compression": {\n          "description": "Enable/disable compression of the vmdk image",\n          "type": "boolean",\n          "default": true\n        },\n        "subformat": {\n          "description": "VMDK flat extent format",\n          "type": "string",\n          "enum": [\n            "monolithicSparse",\n            "monolithicFlat",\n            "twoGbMaxExtentSparse",\n            "twoGbMaxExtentFlat",\n            "streamOptimized"\n          ]\n        }\n      }\n    },\n    "vpc": {\n      "description": "Create a vpc image",\n      "type": "object",\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false,\n      "properties": {\n        "type": {\n          "description": "The type of the format, here \'vpc\'",\n          "type": "string",\n          "enum": [\n            "vpc"\n          ]\n        },\n        "force_size": {\n          "description": "Force disk size calculation to use the actual size specified, rather than using the nearest CHS-based calculation",\n          "type": "boolean",\n          "default": true\n        },\n        "subformat": {\n          "description": "Type of virtual hard disk format",\n          "type": "string",\n          "default": "fixed",\n          "enum": [\n            "fixed",\n            "dynamic"\n          ]\n        }\n      }\n    },\n    "vhdx": {\n      "description": "Create a vhdx image",\n      "type": "object",\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false,\n      "properties": {\n        "type": {\n          "description": "The type of the format, here \'vhdx\'",\n          "type": "string",\n          "enum": [\n            "vhdx"\n          ]\n        }\n      }\n    }\n  },\n  "inputs": {\n    "type": "object",\n    "additionalProperties": false,\n    "required": [\n      "image"\n    ],\n    "properties": {\n      "image": {\n        "type": "object",\n        "additionalProperties": true\n      }\n    }\n  },\n  "options": {\n    "additionalProperties": false,\n    "required": [\n      "filename",\n      "format"\n    ],\n    "properties": {\n      "filename": {\n        "description": "Filename for resulting image",\n        "type": "string"\n      },\n      "format": {\n        "oneOf": [\n          {\n            "$ref": "#/definitions/qcow2"\n          },\n          {\n            "$ref": "#/definitions/vdi"\n          },\n          {\n            "$ref": "#/definitions/vmdk"\n          },\n          {\n            "$ref": "#/definitions/vpc"\n          },\n          {\n            "$ref": "#/definitions/vhdx"\n          }\n        ]\n      }\n    }\n  }\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);